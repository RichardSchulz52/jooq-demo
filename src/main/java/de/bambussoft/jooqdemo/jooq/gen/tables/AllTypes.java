/*
 * This file is generated by jOOQ.
 */
package de.bambussoft.jooqdemo.jooq.gen.tables;


import de.bambussoft.jooqdemo.jooq.gen.Public;
import de.bambussoft.jooqdemo.jooq.gen.tables.records.AllTypesRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllTypes extends TableImpl<AllTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.ALL_TYPES</code>
     */
    public static final AllTypes ALL_TYPES = new AllTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllTypesRecord> getRecordType() {
        return AllTypesRecord.class;
    }

    /**
     * The column <code>PUBLIC.ALL_TYPES.ONE_CHAR</code>.
     */
    public final TableField<AllTypesRecord, String> ONE_CHAR = createField(DSL.name("ONE_CHAR"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>PUBLIC.ALL_TYPES.HUNDRED_CHARS</code>.
     */
    public final TableField<AllTypesRecord, String> HUNDRED_CHARS = createField(DSL.name("HUNDRED_CHARS"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.ALL_TYPES.BINARY</code>.
     */
    public final TableField<AllTypesRecord, byte[]> BINARY = createField(DSL.name("BINARY"), SQLDataType.BINARY(1), this, "");

    /**
     * The column <code>PUBLIC.ALL_TYPES.TIMESTAMP</code>.
     */
    public final TableField<AllTypesRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("TIMESTAMP"), SQLDataType.LOCALDATETIME(6), this, "");

    private AllTypes(Name alias, Table<AllTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private AllTypes(Name alias, Table<AllTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.ALL_TYPES</code> table reference
     */
    public AllTypes(String alias) {
        this(DSL.name(alias), ALL_TYPES);
    }

    /**
     * Create an aliased <code>PUBLIC.ALL_TYPES</code> table reference
     */
    public AllTypes(Name alias) {
        this(alias, ALL_TYPES);
    }

    /**
     * Create a <code>PUBLIC.ALL_TYPES</code> table reference
     */
    public AllTypes() {
        this(DSL.name("ALL_TYPES"), null);
    }

    public <O extends Record> AllTypes(Table<O> child, ForeignKey<O, AllTypesRecord> key) {
        super(child, key, ALL_TYPES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public AllTypes as(String alias) {
        return new AllTypes(DSL.name(alias), this);
    }

    @Override
    public AllTypes as(Name alias) {
        return new AllTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AllTypes rename(String name) {
        return new AllTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AllTypes rename(Name name) {
        return new AllTypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, byte[], LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package de.bambussoft.jooqdemo.jooq.gen.tables;


import de.bambussoft.jooqdemo.MyEnum;
import de.bambussoft.jooqdemo.jooq.converter.MyEnumConverter;
import de.bambussoft.jooqdemo.jooq.gen.Public;
import de.bambussoft.jooqdemo.jooq.gen.tables.records.EnumTestsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EnumTests extends TableImpl<EnumTestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.ENUM_TESTS</code>
     */
    public static final EnumTests ENUM_TESTS = new EnumTests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EnumTestsRecord> getRecordType() {
        return EnumTestsRecord.class;
    }

    /**
     * The column <code>PUBLIC.ENUM_TESTS.MY_ENUM</code>.
     */
    public final TableField<EnumTestsRecord, MyEnum> MY_ENUM = createField(DSL.name("MY_ENUM"), SQLDataType.VARCHAR(127), this, "", new MyEnumConverter());

    private EnumTests(Name alias, Table<EnumTestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EnumTests(Name alias, Table<EnumTestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.ENUM_TESTS</code> table reference
     */
    public EnumTests(String alias) {
        this(DSL.name(alias), ENUM_TESTS);
    }

    /**
     * Create an aliased <code>PUBLIC.ENUM_TESTS</code> table reference
     */
    public EnumTests(Name alias) {
        this(alias, ENUM_TESTS);
    }

    /**
     * Create a <code>PUBLIC.ENUM_TESTS</code> table reference
     */
    public EnumTests() {
        this(DSL.name("ENUM_TESTS"), null);
    }

    public <O extends Record> EnumTests(Table<O> child, ForeignKey<O, EnumTestsRecord> key) {
        super(child, key, ENUM_TESTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public EnumTests as(String alias) {
        return new EnumTests(DSL.name(alias), this);
    }

    @Override
    public EnumTests as(Name alias) {
        return new EnumTests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EnumTests rename(String name) {
        return new EnumTests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EnumTests rename(Name name) {
        return new EnumTests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<MyEnum> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}

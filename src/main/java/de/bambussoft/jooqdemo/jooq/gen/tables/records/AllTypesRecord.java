/*
 * This file is generated by jOOQ.
 */
package de.bambussoft.jooqdemo.jooq.gen.tables.records;


import de.bambussoft.jooqdemo.jooq.gen.tables.AllTypes;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllTypesRecord extends TableRecordImpl<AllTypesRecord> implements Record4<String, String, byte[], LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.ALL_TYPES.ONE_CHAR</code>.
     */
    public void setOneChar(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ALL_TYPES.ONE_CHAR</code>.
     */
    public String getOneChar() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ALL_TYPES.HUNDRED_CHARS</code>.
     */
    public void setHundredChars(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ALL_TYPES.HUNDRED_CHARS</code>.
     */
    public String getHundredChars() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ALL_TYPES.BINARY</code>.
     */
    public void setBinary(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ALL_TYPES.BINARY</code>.
     */
    public byte[] getBinary() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ALL_TYPES.TIMESTAMP</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ALL_TYPES.TIMESTAMP</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, byte[], LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, byte[], LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return AllTypes.ALL_TYPES.ONE_CHAR;
    }

    @Override
    public Field<String> field2() {
        return AllTypes.ALL_TYPES.HUNDRED_CHARS;
    }

    @Override
    public Field<byte[]> field3() {
        return AllTypes.ALL_TYPES.BINARY;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return AllTypes.ALL_TYPES.TIMESTAMP;
    }

    @Override
    public String component1() {
        return getOneChar();
    }

    @Override
    public String component2() {
        return getHundredChars();
    }

    @Override
    public byte[] component3() {
        return getBinary();
    }

    @Override
    public LocalDateTime component4() {
        return getTimestamp();
    }

    @Override
    public String value1() {
        return getOneChar();
    }

    @Override
    public String value2() {
        return getHundredChars();
    }

    @Override
    public byte[] value3() {
        return getBinary();
    }

    @Override
    public LocalDateTime value4() {
        return getTimestamp();
    }

    @Override
    public AllTypesRecord value1(String value) {
        setOneChar(value);
        return this;
    }

    @Override
    public AllTypesRecord value2(String value) {
        setHundredChars(value);
        return this;
    }

    @Override
    public AllTypesRecord value3(byte[] value) {
        setBinary(value);
        return this;
    }

    @Override
    public AllTypesRecord value4(LocalDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public AllTypesRecord values(String value1, String value2, byte[] value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AllTypesRecord
     */
    public AllTypesRecord() {
        super(AllTypes.ALL_TYPES);
    }

    /**
     * Create a detached, initialised AllTypesRecord
     */
    public AllTypesRecord(String oneChar, String hundredChars, byte[] binary, LocalDateTime timestamp) {
        super(AllTypes.ALL_TYPES);

        setOneChar(oneChar);
        setHundredChars(hundredChars);
        setBinary(binary);
        setTimestamp(timestamp);
    }

    /**
     * Create a detached, initialised AllTypesRecord
     */
    public AllTypesRecord(de.bambussoft.jooqdemo.jooq.gen.tables.pojos.AllTypes value) {
        super(AllTypes.ALL_TYPES);

        if (value != null) {
            setOneChar(value.getOneChar());
            setHundredChars(value.getHundredChars());
            setBinary(value.getBinary());
            setTimestamp(value.getTimestamp());
        }
    }
}

/*
 * This file is generated by jOOQ.
 */
package de.bambussoft.jooqdemo.jooq.gen.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllTypes implements Serializable {

    private static final long serialVersionUID = 1L;

    private String        oneChar;
    private String        hundredChars;
    private byte[]        binary;
    private LocalDateTime timestamp;

    public AllTypes() {}

    public AllTypes(AllTypes value) {
        this.oneChar = value.oneChar;
        this.hundredChars = value.hundredChars;
        this.binary = value.binary;
        this.timestamp = value.timestamp;
    }

    public AllTypes(
        String        oneChar,
        String        hundredChars,
        byte[]        binary,
        LocalDateTime timestamp
    ) {
        this.oneChar = oneChar;
        this.hundredChars = hundredChars;
        this.binary = binary;
        this.timestamp = timestamp;
    }

    /**
     * Getter for <code>PUBLIC.ALL_TYPES.ONE_CHAR</code>.
     */
    public String getOneChar() {
        return this.oneChar;
    }

    /**
     * Setter for <code>PUBLIC.ALL_TYPES.ONE_CHAR</code>.
     */
    public void setOneChar(String oneChar) {
        this.oneChar = oneChar;
    }

    /**
     * Getter for <code>PUBLIC.ALL_TYPES.HUNDRED_CHARS</code>.
     */
    public String getHundredChars() {
        return this.hundredChars;
    }

    /**
     * Setter for <code>PUBLIC.ALL_TYPES.HUNDRED_CHARS</code>.
     */
    public void setHundredChars(String hundredChars) {
        this.hundredChars = hundredChars;
    }

    /**
     * Getter for <code>PUBLIC.ALL_TYPES.BINARY</code>.
     */
    public byte[] getBinary() {
        return this.binary;
    }

    /**
     * Setter for <code>PUBLIC.ALL_TYPES.BINARY</code>.
     */
    public void setBinary(byte[] binary) {
        this.binary = binary;
    }

    /**
     * Getter for <code>PUBLIC.ALL_TYPES.TIMESTAMP</code>.
     */
    public LocalDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Setter for <code>PUBLIC.ALL_TYPES.TIMESTAMP</code>.
     */
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AllTypes other = (AllTypes) obj;
        if (oneChar == null) {
            if (other.oneChar != null)
                return false;
        }
        else if (!oneChar.equals(other.oneChar))
            return false;
        if (hundredChars == null) {
            if (other.hundredChars != null)
                return false;
        }
        else if (!hundredChars.equals(other.hundredChars))
            return false;
        if (binary == null) {
            if (other.binary != null)
                return false;
        }
        else if (!Arrays.equals(binary, other.binary))
            return false;
        if (timestamp == null) {
            if (other.timestamp != null)
                return false;
        }
        else if (!timestamp.equals(other.timestamp))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.oneChar == null) ? 0 : this.oneChar.hashCode());
        result = prime * result + ((this.hundredChars == null) ? 0 : this.hundredChars.hashCode());
        result = prime * result + ((this.binary == null) ? 0 : Arrays.hashCode(this.binary));
        result = prime * result + ((this.timestamp == null) ? 0 : this.timestamp.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AllTypes (");

        sb.append(oneChar);
        sb.append(", ").append(hundredChars);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(timestamp);

        sb.append(")");
        return sb.toString();
    }
}

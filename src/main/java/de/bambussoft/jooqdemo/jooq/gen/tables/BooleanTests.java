/*
 * This file is generated by jOOQ.
 */
package de.bambussoft.jooqdemo.jooq.gen.tables;


import de.bambussoft.jooqdemo.jooq.gen.Public;
import de.bambussoft.jooqdemo.jooq.gen.tables.records.BooleanTestsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooleanTests extends TableImpl<BooleanTestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.BOOLEAN_TESTS</code>
     */
    public static final BooleanTests BOOLEAN_TESTS = new BooleanTests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BooleanTestsRecord> getRecordType() {
        return BooleanTestsRecord.class;
    }

    /**
     * The column <code>PUBLIC.BOOLEAN_TESTS.NAME</code>.
     */
    public final TableField<BooleanTestsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(127), this, "");

    /**
     * The column <code>PUBLIC.BOOLEAN_TESTS.STRING_BOOLEAN</code>.
     */
    public final TableField<BooleanTestsRecord, String> STRING_BOOLEAN = createField(DSL.name("STRING_BOOLEAN"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.BOOLEAN_TESTS.INT_BOOLEAN</code>.
     */
    public final TableField<BooleanTestsRecord, Integer> INT_BOOLEAN = createField(DSL.name("INT_BOOLEAN"), SQLDataType.INTEGER, this, "");

    private BooleanTests(Name alias, Table<BooleanTestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BooleanTests(Name alias, Table<BooleanTestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.BOOLEAN_TESTS</code> table reference
     */
    public BooleanTests(String alias) {
        this(DSL.name(alias), BOOLEAN_TESTS);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOLEAN_TESTS</code> table reference
     */
    public BooleanTests(Name alias) {
        this(alias, BOOLEAN_TESTS);
    }

    /**
     * Create a <code>PUBLIC.BOOLEAN_TESTS</code> table reference
     */
    public BooleanTests() {
        this(DSL.name("BOOLEAN_TESTS"), null);
    }

    public <O extends Record> BooleanTests(Table<O> child, ForeignKey<O, BooleanTestsRecord> key) {
        super(child, key, BOOLEAN_TESTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public BooleanTests as(String alias) {
        return new BooleanTests(DSL.name(alias), this);
    }

    @Override
    public BooleanTests as(Name alias) {
        return new BooleanTests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BooleanTests rename(String name) {
        return new BooleanTests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BooleanTests rename(Name name) {
        return new BooleanTests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
